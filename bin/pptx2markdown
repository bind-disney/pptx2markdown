#!/usr/bin/env ruby
require 'gli'
require 'pptx2markdown'

module Pptx2markdown
  class Application
    include GLI::App
    extend GLI::App

    program_desc 'Extracts text from pptx files to markdown'

    version Pptx2markdown::VERSION

    subcommand_option_handling :normal
    arguments :strict

    desc 'Dump all headers and text lines from pptx file to markdown file'
    command :dump do |dump_command|
      dump_command.desc 'Input pptx file'
      dump_command.flag [:i, 'input-file'] # , must_match: /\.pptx\Z/

      dump_command.desc 'Output markdown file'
      dump_command.flag [:o, 'output-file'], default_value: :stdout

      dump_command.action do |_global_options, options, _args|
        Pptx2markdown::Commands::Dump.new(options).execute
      end
    end

    desc 'Build pptx file from markdown file'
    command :build do |build_command|
      build_command.desc 'Input markdown file'
      build_command.flag [:i, 'input-file']

      build_command.desc 'Output pptx file'
      build_command.flag [:o, 'output-file'] # , must_match: /\.pptx\Z/

      build_command.action do |_global_options, options, _args|
        Pptx2markdown::Commands::Build.new(options).execute
      end
    end

    desc 'Extract all headers and text lines from pptx and create new pptx file'
    command :rebuild do |rebuild_command|
      rebuild_command.desc 'Replace existing pptx file or create new'
      rebuild_command.switch [:r, :replace], default_value: false

      rebuild_command.desc 'Input pptx file'
      rebuild_command.flag [:i, 'input-file'] # , must_match: /\.pptx\Z/

      rebuild_command.action do |_global_options, options, _args|
        Pptx2markdown::Commands::Rebuild.new(options).execute
      end
    end

    exit run(ARGV)
  end
end
